function [spec,f]= fftrl(s,t,percent,n)
% FFTRL: forward Fourier transform for real-valued signals.
%
% [spec,f]= fftrl(s,t,percent,n)
% [spec,f]= fftrl(s,t,percent)
% [spec,f]= fftrl(s,t)
%
% Forward fourier transform of a real-valued signal. Relative to
% MATLAB's fft it returns only the positive frequencies in an array
% roughly half the size. If there are n input time samples, then there
% will be floor(n/2+1) frequency samples. This means that if n is an even
% number, then a time series of length n and one of length n+1 will produce
% frequency spectra of the same length. However, only the first case will
% have a sample at Nyquist.
% If the input trace is a vector, then the return
% is simply the transform of that vector. If a matrix, then each 
% column of the matrix is transformed. The inverse is accomplished by
% IFFTRL.
%
% s= input signal (trace or gather, i.e. vector or matrix) 
% t= input time coordinate vector
% percent= specifies the length of a raised cosine taper to be
%          applied to s (both ends) prior to any padding. 
%          Taper is a percent of the length of s. Taper is 
%          applied using MWINDOW.
%		********** Default=0% ***********
% n= length to which the input trace is to be padded with zeros.
%     ********** Default is the input length (no pad) ***********
%  
% spec= output spectrum
% f= output frequency sample vector
%
 
% set defaults
 if(nargin<4)
		n=length(t);
 end
 if(nargin<3)
   percent=0.0;
 end
% determine number of traces in ensemble
 [l,m]=size(s);
 ntraces=1;
 itr=0; %transpose flag
 if(l==1) nsamps=m; itr=1; s=s(:); %switch to column vectors
 elseif(m==1) nsamps=l;
 else
 	nsamps=l; ntraces=m;
 end
 if(nsamps~=length(t))
		t=t(1)+(t(2)-t(1))*(0:nsamps-1);
		 if(nargin<4)
			n=length(t);
		 end
	%error(' time vector and trace matrix don''t match in length');
 end
 
% apply the taper
 if(percent>0)
	 mw=mwindow(nsamps,percent);
	 mw=mw(:,ones(1,ntraces));
	 s=s.*mw;
	 clear mw
 end
% pad s if needed
 if (nsamps<n),
	s=[s;zeros(n-nsamps,ntraces)];
  	nsamps=n; 
 end

% transform the array
	spec=fft(s,nsamps);
	spec=spec(1:floor(n/2+1),:);% save only the positive frequencies
	clear s;
    
% build the frequency vector
fnyq=1. / (2*(t(2)-t(1)));
 nf=size(spec,1);
 df=2*fnyq/n;
 %f=linspace(0.,fnyq,nf)';
 f=df*(0:nf-1)';
 
 if(itr)
 	f=f';
 	spec=spec.';
 end
